<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lastexpression = "";

compile[0] = -1;
compile[1] = -1;

mybuff = buffer_create(64, buffer_grow, 1);

result = -1;
variables = ds_map_create();

myfunc = ML_InitParserCS(variables);

    ML_AddVariable(myfunc, "globalvariable");
    ML_AddVariable(myfunc, "pi");
    ML_AddVariable(myfunc, "e");
    ML_AddVariable(myfunc, "var1");
    ML_AddVariable(myfunc, "var2");
    ML_AddVariable(myfunc, "var3");
    ML_AddVariable(myfunc, "str1","", ML_VAL_STRING, false); 
    ML_AddVariable(myfunc, "str2","", ML_VAL_STRING, false);
    ML_AddVariable(myfunc, "str3"); 
    
    ML_AddFunction(myfunc, "getstr",myGetString, ML_VAL_STRING);
    ML_AddFunction(myfunc, "strlen",myStringLength, ML_VAL_REAL, ML_VAL_STRING);
    
    
    ML_AddBinaryOper(myfunc, "nPr",14.5,_ML_FPermutation, ML_VAL_REAL, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddBinaryOper(myfunc, "nCr",14.5,_ML_FCombination, ML_VAL_REAL, ML_VAL_REAL, ML_VAL_REAL);
    
    ML_AddFunction(myfunc, "rand",myRandom, ML_VAL_REAL);
    ML_AddFunction(myfunc, "angle_difference",AngleDifference, ML_VAL_REAL, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "not",_ML_FNot, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "sin",_ML_FSin, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "cos",_ML_FCos, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "tan",_ML_FTan, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "degrees",_ML_FDegrees, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "radians",_ML_FRadians, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "sqrt",_ML_FSqrt, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "power",_ML_FPower, ML_VAL_REAL, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "round",_ML_FRound, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "floor",_ML_FFloor, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "ceil",_ML_FCeil, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "frac",_ML_FFrac, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "abs", _ML_FAbs, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "arcsin", _ML_FASin, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "arccos", _ML_FACos, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "arctan", _ML_FATan, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "exp", _ML_FExp, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "ln", _ML_FLn, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "log", _ML_FLog, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "log2", _ML_FLog2, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "logn", _ML_FLogn, ML_VAL_REAL, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "factorial", _ML_FFactorial, ML_VAL_REAL, ML_VAL_REAL);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var k = 10;
draw_set_font(ft_read);
draw_text(10,k, "last expression: "); k += 18;
draw_set_font(ft_code);
draw_text(50,k, lastexpression); k += 18;

draw_set_font(ft_read);
draw_text(10,k, "calculated: "); k += 18;
draw_set_font(ft_code);
draw_text(50,k, result != -1); k += 18;
k+=18;
if (result != -1) {
    draw_text(50,k, ML_ResObj_HasAnswer(result)); k += 18;
    draw_text(50,k, "ans: " + string(ML_ResObj_GetFinalAnswer(result))); k += 18;
    draw_text(50,k,"num: " + string(ML_ResObj_GetAnswerNum(result))); k += 18;
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (compile[0] != -1) {
    if (result != -1) {
        ML_ResultCleanup(result);
    }
    result = ML_Execute(myfunc, compile);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lastexpression = get_string("give expression ", "sin( pi )");



if (compile[0] != -1) {
    ML_CompileCleanup(compile);
    compile[0] = -1;
    compile[1] = -1;
}

compile = ML_Compile(myfunc, lastexpression);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
