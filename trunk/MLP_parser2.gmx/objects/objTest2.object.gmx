<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var variables = ds_map_create();

tvariables = ds_map_create();
ds_map_copy(tvariables, variables);
myfunc = MLP_InitParserCS(tvariables);

with (myfunc) {
    MLP_AddFunction("new_variable", newRealVarScript, MLP_VAL_REAL, MLP_VAL_STRING, MLP_VAL_REAL);      //notice two times the same name
    MLP_AddFunction("new_variable", newStringVarScript, MLP_VAL_STRING, MLP_VAL_STRING, MLP_VAL_STRING);  //function overloading knows the difference by argument type
    
    //first variable has to be "created" by the user before it can be used. (And this line has to be parsed).
    MLP_SetExpression("new_variable('customvar', 10)");
    MLP_Calculate();
    
    MLP_SetExpression("customvar *= 1.5");
    MLP_Calculate();
    
}


tvariables = ds_map_create();
ds_map_copy(tvariables, variables);
myfunc = MLP_InitParserCS(tvariables);

with (myfunc) {
    MLP_AddFunction("new_variable", newRealVarScript, MLP_VAL_REAL, MLP_VAL_STRING, MLP_VAL_REAL);      //notice two times the same name
    MLP_AddFunction("new_variable", newStringVarScript, MLP_VAL_STRING, MLP_VAL_STRING, MLP_VAL_STRING);  //function overloading knows the difference by argument type
    
    //One can declare multiple variables, as long as 
    MLP_SetExpression("new_variable('customvar1', 'Hello'); new_variable('customvar2', ' world')");
    MLP_Calculate();
    
    MLP_SetExpression("customvar1 + customvar2");
    MLP_Calculate();
    
}

ds_map_destroy(variables);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (MLP_objParser) {
    MLP_ClearExceptions();
    MLP_Calculate();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, k;
i = 0;
//debug mode, for all parsers
k = 400;
draw_set_font(ft_code);


var num;
num = instance_number(MLP_objParser);
for (i = 0; i &lt; num; i += 1) {
    with (instance_find(MLP_objParser, i)) {
        if (MLP_HasAnswer()) {
            draw_set_color(c_black);
        } else {
            draw_set_color(c_red);
        }
        draw_text(0, i * 56,MLP_GetExprString() );
        draw_text(30,i * 56 + 14, MLP_LastExceptionString())
        draw_text(30,i * 56 + 28, "ans = " + string(MLP_GetFinalAnswer()));
        draw_set_color(c_black);
        draw_line(0,i*56,room_width,i*56);
    }
}
draw_set_color(c_black);
draw_line_width(k-5,0,k-5,560,2);
draw_line_width(0,560,room_width,560,2);

var j;
draw_set_font(ft_read);
j = 0;
draw_text(k,j,"Shows the usage of a customvariable"); j += 56;
draw_text(k,j,"Shows two string variables");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
