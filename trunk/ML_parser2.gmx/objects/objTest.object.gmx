<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fps_sum = 0;
fps_num = 0;
global.DEBUGNOW = false;
global.ACTIVELISTS = 0;
global.ACTIVEMAPS = 0;
global.ACTIVEQUEUES = 0;
global.ACTIVESTACKS = 0;

var str;
var tvariables;
variables = ds_map_create();
allfuncs = ds_list_create();


ds_map_add(variables, "globalvariable", 300);
ds_map_add(variables, "pi", pi);
ds_map_add(variables, "e", exp(1));
ds_map_add(variables, "var1", 1);
ds_map_add(variables, "var2", 2);
ds_map_add(variables, "var3", 3);
ds_map_add(variables, "str1", "");
ds_map_add(variables, "str2", "");
ds_map_add(variables, "str3", "hello world");

myfunc = ML_InitParserCS(variables);
str = "angle_difference(-270,720)"

    ML_AddFunction(myfunc, "angle_difference",AngleDifference, ML_VAL_REAL, ML_VAL_REAL, ML_VAL_REAL);
    ML_SetExpression(myfunc, str);
ds_list_add(allfuncs, myfunc);

myfunc = ML_InitParserCS(variables);
str = "6 &lt;&lt; 2"

    ML_SetExpression(myfunc, str);
ds_list_add(allfuncs, myfunc);

str = "sin( pi / 2) +globalvariable"
myfunc = ML_InitParserCS(variables);

    ML_AddVariable(myfunc, "globalvariable");
    ML_AddVariable(myfunc, "pi", pi); //3rd argument is unnecessary as variable is already initialized
    ML_AddFunction(myfunc, "sin",_ML_FSin,ML_VAL_REAL, ML_VAL_REAL);
    ML_SetExpression(myfunc, str);
ds_list_add(allfuncs, myfunc);

str = "2 * 4 nCr 2 * 2"
myfunc = ML_InitParserCS(variables);

    //a * b nCr c * d = a * (b nCr c) * d
    ML_AddBinaryOper(myfunc, "nCr",25,_ML_FCombination, ML_VAL_REAL, ML_VAL_REAL, ML_VAL_REAL);
    ML_SetExpression(myfunc, str);
ds_list_add(allfuncs, myfunc);

str = "rand() - 0.5"
myfunc = ML_InitParserCS(variables);

    ML_AddFunction(myfunc, "rand",myRandom, ML_VAL_REAL);
    ML_SetExpression(myfunc, str);
ds_list_add(allfuncs, myfunc);

str = "2 &lt;= 4 ^^ 4 &gt; 5";
myfunc = ML_InitParserCS(variables);

    ML_SetExpression(myfunc, str);
ds_list_add(allfuncs, myfunc);


str = "2 * * 5"
myfunc = ML_InitParserCS(variables);
    ML_SetExpression(myfunc, str);
ds_list_add(allfuncs, myfunc);

str = "var1 += var2 = (3*var3 - var2)";
myfunc = ML_InitParserCS(variables);

    //values "1" are unnecessary as variables are already initialized.
    
    
    ML_AddVariable(myfunc, "var1",1, ML_VAL_REAL, false);
    ML_AddVariable(myfunc, "var2",2, ML_VAL_REAL, false);
    ML_AddVariable(myfunc, "var3",3, ML_VAL_REAL, true);
    ML_SetExpression(myfunc, str);
ds_list_add(allfuncs, myfunc);//*/

str = "str2= (str1='asdfhjkg', strlen(str1)&lt;4 ? 's' : 'b')";
//str = "str1='asdfhjkg', strlen(str1)&lt;4 ? 's' : 'b'";
//str = "-8";
myfunc = ML_InitParserCS(variables);

    ML_AddFunction(myfunc, "getstr",myGetString, ML_VAL_STRING);
    ML_AddFunction(myfunc, "strlen",myStringLength, ML_VAL_REAL, ML_VAL_STRING);
    
    ML_AddVariable(myfunc, "str1","", ML_VAL_STRING, false); 
    ML_AddVariable(myfunc, "str2","", ML_VAL_STRING, false);
    ML_AddVariable(myfunc, "str3"); //automatically checks that "str1" is string (and sets var to unreadable
    ML_SetExpression(myfunc, str);
ds_list_add(allfuncs, myfunc);
//show_message(myfunc); -- 100004


str = "ln(e^2^3)!";
myfunc = ML_InitParserScience(variables);

    ML_SetExpression(myfunc, str);
ds_list_add(allfuncs, myfunc);
//show_message(myfunc); -- 100059



str = "(sin(pi / 2) *  -(4-2) + 1)/10 + globalvariable * (1/100) &lt;= rand() * 5"
//str = "strlen('adafb')"
myfunc = ML_InitParserCS(variables);

    ML_AddVariable(myfunc, "globalvariable");
    ML_AddVariable(myfunc, "pi");
    ML_AddVariable(myfunc, "e");
    ML_AddVariable(myfunc, "var1");
    ML_AddVariable(myfunc, "var2");
    ML_AddVariable(myfunc, "var3");
    ML_AddVariable(myfunc, "str1","", ML_VAL_STRING, false); 
    ML_AddVariable(myfunc, "str2","", ML_VAL_STRING, false);
    ML_AddVariable(myfunc, "str3"); 
    
    ML_AddFunction(myfunc, "getstr",myGetString, ML_VAL_STRING);
    ML_AddFunction(myfunc, "strlen",myStringLength, ML_VAL_REAL, ML_VAL_STRING);
    
    
    ML_AddBinaryOper(myfunc, "nPr",14.5,_ML_FPermutation, ML_VAL_REAL, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddBinaryOper(myfunc, "nCr",14.5,_ML_FCombination, ML_VAL_REAL, ML_VAL_REAL, ML_VAL_REAL);
    
    ML_AddFunction(myfunc, "rand",myRandom, ML_VAL_REAL);
    ML_AddFunction(myfunc, "angle_difference",AngleDifference, ML_VAL_REAL, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "not",_ML_FNot, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "sin",_ML_FSin, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "cos",_ML_FCos, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "tan",_ML_FTan, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "degrees",_ML_FDegrees, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "radians",_ML_FRadians, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "sqrt",_ML_FSqrt, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "power",_ML_FPower, ML_VAL_REAL, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "round",_ML_FRound, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "floor",_ML_FFloor, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "ceil",_ML_FCeil, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "frac",_ML_FFrac, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "abs", _ML_FAbs, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "arcsin", _ML_FASin, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "arccos", _ML_FACos, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "arctan", _ML_FATan, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "exp", _ML_FExp, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "ln", _ML_FLn, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "log", _ML_FLog, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "log2", _ML_FLog2, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "logn", _ML_FLogn, ML_VAL_REAL, ML_VAL_REAL, ML_VAL_REAL);
    ML_AddFunction(myfunc, "factorial", _ML_FFactorial, ML_VAL_REAL, ML_VAL_REAL);
    
    
    ML_SetExpression(myfunc, str);
ds_list_add(allfuncs, myfunc);
//*/
calculate_all_parsers(allfuncs);

//ds_map_destroy(variables);  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>calculate_all_parsers(allfuncs);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, k;
i = 0;
//debug mode, for all parsers
k = 400;
draw_set_font(ft_code);
++fps_num;
if (fps_num &gt; 90) {
    fps_sum += fps_real;
    draw_text(200,18,fps_sum / (fps_num - 90));
}
draw_text(200,0,fps_real);

draw_text(200,36,"lists: " + string(global.ACTIVELISTS));
draw_text(200,54,"maps: " + string(global.ACTIVEMAPS));
draw_text(200,72,"queues: " + string(global.ACTIVEQUEUES));
draw_text(200,90,"stacks: " + string(global.ACTIVESTACKS));


display_all_parsers(allfuncs);
draw_set_color(c_black);
draw_line_width(k-5,0,k-5,560,2);
draw_line_width(0,560,room_width,560,2);

var j;
draw_set_font(ft_read);



j = 0;
draw_text(k,j,"shows a custom function, with 2 arguments"); j += 56;
draw_text(k,j,"shows a binarry operator#bitshifting"); j += 56;
draw_text(k,j,"shows the use of variables#pi is local, globalvariable global#"+
              "globalvariable = " + string(ds_map_find_value(variables,"globalvariable"))); j += 56;
draw_text(k,j,"shows a custom binary operator#precedence is set to higher than multiplication"); j += 56;
draw_text(k,j,"shows another function#without arguments"); j += 56;
draw_text(k,j,"shows the use of logical operators#Logical operators are lower in precedence than comparison#function is read as (2 &lt;= 4) ^^ (4 &gt; 5)"); j += 56;
draw_text(k,j,"shows a typical error which might occur always check for error after#calculating.  If an error occurs the answer is undefined#ALWAYS clear the error state before calculating"); j += 56;
draw_text(k,j,"shows various forms of assignment#initially all 3 variables are '1'#"+
              "var1 = " + string(ds_map_find_value(variables,"var1")) + "  var2 = "+ string(ds_map_find_value(variables,"var2")) + "  var3 = "+ string(ds_map_find_value(variables,"var3"))); j += 56;
draw_text(k,j,"shows use of strings, the comma opearator # and the use of the ternary 'conditional' operator#"+
              "str1 = " + string(ds_map_find_value(variables,"str1")) + "  str2 = "+ string(ds_map_find_value(variables,"str2"))); j += 56;
draw_text(k,j,"Shows a complete different setup of operators, using Science#"+
              "'^' is to the power of, ! means factorian, 'e' is the mathematical const#"+
              "ln(e^2^3) is read as ln(e^(2^3)) = 8#"); j+= 56;
              

              
//*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var str = ML_GetExprString(myfunc);
str = get_string("new function", str);
ML_SetExpression(myfunc, str);
ML_ClearExceptions(myfunc);
ML_Calculate(myfunc);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ind = ML_InitParserCS(variables);
str = "angle_difference(-270,720)"
    //ML_AddFunction(myfunc, "angle_difference",AngleDifference, ML_VAL_REAL, ML_VAL_REAL, ML_VAL_REAL);
    
    ML_AddTernaryOper(ind, "?", ":", 3, _ML_FConditional,
        ML_VAL_REAL,ML_VAL_REAL,ML_VAL_REAL,ML_VAL_REAL);
    //ML_AddTernaryOper(ind, "?", ":", 3, _ML_FConditional,
    //    ML_VAL_STRING,ML_VAL_REAL,ML_VAL_STRING,ML_VAL_STRING);
    
    
//    ML_SetExpression(ind, str);

//ML_Calculate(myfunc);

ML_DestroyParser(ind);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
